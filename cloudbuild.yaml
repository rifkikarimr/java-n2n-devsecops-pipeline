steps: 

#Execute SAST Scan using SonarCloud in GCP DevSecOps Pipeline
  - name: 'maven:3.9-eclipse-temurin-17'
    entrypoint: 'mvn'
    args:
      - 'verify'
      - 'sonar:sonar'
      - '-Dsonar.host.url=https://sonarcloud.io'
      - '-Dsonar.organization=krmdev'
      - '-Dsonar.projectKey=rifkikarimr_java-n2n-devsecops-pipeline'
      - '-Dsonar.token=${_SONAR_TOKEN}'
    id: 'SAST Scan using SonarCloud'

#Run Software Composition Analysis (SCA security scan) using Snyk in GCP DevSecOps Pipeline
  - name: 'maven:3.9-eclipse-temurin-17'
    entrypoint: 'mvn'
    args:
      - 'snyk:test'
      - '-Dsnyk.org=${_SNYK_ORG}'
      - '-Dsnyk.jsonOutputFile=snyk_report.json'
    env:
      - 'SNYK_TOKEN=${_SNYK_TOKEN}'
    allow_failure: true
    id: 'SCA Scan using Snyk'

#Run DAST scan using OWASP ZAP in GCP DevSecOps Pipeline
  - name: 'zaproxy/zap-stable'
    entrypoint: 'zap-baseline.py'
    args:
      - '-t'
      - 'https://www.example.com'  
      - '-r'
      - 'zap_report.html'        
      - '-J'
      - 'zap_report.json'        
    id: 'DAST Scan using OWASP ZAP'
    allow_failure: true

  - name: 'python:3.9'
    entrypoint: 'bash'
    args:
      - '-c'
      - |-
        pip install google-generativeai
        python summarize_reports.py
    # Mengambil API Key dari Secret Manager
    secretEnv: ['GEMINI_API_KEY']
    id: 'AI Security Summary'

#Store Reports Generated by OWASP ZAP in GCP Cloud Bucket named ASecurityGuru
artifacts:
  objects:
    location: 'gs://java-devsecops-pipeline'
    paths:
      - 'zap_report.html'
      - 'zap_report.json'
      - 'snyk_report.json'

availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/GEMINI_API_KEY/versions/latest
    env: 'GEMINI_API_KEY'

options:
  logging: CLOUD_LOGGING_ONLY
  
